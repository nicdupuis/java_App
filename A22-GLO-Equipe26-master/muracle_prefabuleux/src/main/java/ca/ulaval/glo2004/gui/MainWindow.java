package ca.ulaval.glo2004.gui;
import ca.ulaval.glo2004.domain.Accessoire;
 import java.awt.*;
import java.lang.*;
 import ca.ulaval.glo2004.domain.Controleur;
 import ca.ulaval.glo2004.domain.Controleur.Modes;
import ca.ulaval.glo2004.domain.ControllerObserver;
import ca.ulaval.glo2004.domain.Cote;
import ca.ulaval.glo2004.domain.Element;
 import ca.ulaval.glo2004.domain.Salle;
import ca.ulaval.glo2004.domain.Utilitaire.UserInput;
import ca.ulaval.glo2004.domain.MesureImperial;
import ca.ulaval.glo2004.domain.Mur;
import ca.ulaval.glo2004.domain.Utilitaire.ConversionFraction;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;


 import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;




public class MainWindow extends javax.swing.JFrame implements ControllerObserver{

    public Controleur controller;
    public Modes selectedMode;
    
    private ApplicationMode actualMode;
    
    //gestion d√©placement
    public Point actualMousePoint;
    public Point delta;
    public Point initMousePoint = new Point();
    
    // Util
    public UserInput userInput;
    public ConversionFraction conversionFraction;
    
    Accessoire elementSelectionne;
    Mur separateurSelectionne;
    
    public enum ApplicationMode
    {
        SELECT, ADD, DELETE
    }
    
    public MainWindow() {
        controller = new Controleur();
        controller.registerObserver(this);
        userInput = new UserInput();
        conversionFraction = new ConversionFraction ();
        
        
        initComponents();
        setFocusable(true);
    }
    
    public void setMode(Modes newMode) 
    {
        this.selectedMode = newMode;
    }
    
    public void setMode(ApplicationMode newMode)
    {
        this.actualMode = newMode;
    }

    public ApplicationMode getActualMode() {
        return actualMode;
    }

    @Override
    public void notifyUpdatedSalle() {
        this.drawingPanel1.repaint();
    }

    public DrawingPanel getDrawingPanel()
    {
        return this.drawingPanel1;
    }
    
    public JScrollPane getMainScrollPane()
    {
        return this.mainScrollPane;
    }
    
    public Dimension getMainScrollPaneDimension()
    {
        return mainScrollPane.getSize();
    }
    
    public Accessoire getElementSelectionne()
    {
        return elementSelectionne;
    }
    
    public void setElementSelectionne(Accessoire element)
    {
        this.elementSelectionne = element;
    }
    
    protected Point calculPointUnzoom(Point pPoint){
        int x =  (int) (pPoint.x / drawingPanel1.getZoom()+drawingPanel1.getZoomX());
        int y =  (int) (pPoint.y / drawingPanel1.getZoom()+drawingPanel1.getZoomY());
        return new Point(x,y);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createViewButtonGroup = new javax.swing.ButtonGroup();
        createIntExtButtonGroup = new javax.swing.ButtonGroup();
        createActionButtonGroup = new javax.swing.ButtonGroup();
        jMenuItem3 = new javax.swing.JMenuItem();
        createDecoupeButtonGroup = new javax.swing.ButtonGroup();
        createSeparateurButtonGroup = new javax.swing.ButtonGroup();
        createSeparateurCoteGroup = new javax.swing.ButtonGroup();
        buttonGroupDecoupe = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Dessus = new javax.swing.JPanel();
        addingPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dessus_LargeurSalle = new javax.swing.JTextField();
        dessus_LongueurSalle = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        dessus_HauteurRetourDair = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel24 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        dessus_MargeEpaisseurMur = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        ajoutSeparateur = new javax.swing.JToggleButton();
        selectSeparateur = new javax.swing.JToggleButton();
        deleteSeparateur = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JSeparator();
        comboBoxDessus = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        longueurMur = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dessus_HauteurSalle = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Cote = new javax.swing.JPanel();
        addingPanel = new javax.swing.JPanel();
        boutonsCote = new javax.swing.JPanel(new FlowLayout(FlowLayout.LEFT));
        coteNord = new javax.swing.JToggleButton();
        coteSud = new javax.swing.JToggleButton();
        coteEst = new javax.swing.JToggleButton();
        coteOuest = new javax.swing.JToggleButton();
        boutonsIntExt = new javax.swing.JPanel(new FlowLayout(FlowLayout.LEFT));
        coteInterieur = new javax.swing.JToggleButton();
        coteExterieur = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        actionPanel = new javax.swing.JPanel();
        editBouton = new javax.swing.JToggleButton();
        deleteBouton = new javax.swing.JToggleButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cote_HauteurAccessoire = new javax.swing.JTextField();
        cote_LargeurAccessoire = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        addButton = new javax.swing.JToggleButton();
        accessoireTypeBox = new javax.swing.JComboBox<>();
        labelMargeFenetre = new javax.swing.JLabel();
        margeFenetre = new javax.swing.JTextField();
        labelMargeFenetre2 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        ajoutSeparateur1 = new javax.swing.JToggleButton();
        comboBoxElevation = new javax.swing.JComboBox<>();
        selectSeparateur1 = new javax.swing.JToggleButton();
        deleteSeparateur1 = new javax.swing.JToggleButton();
        cote_LongueurMur = new javax.swing.JTextField();
        labelMargeFenetre3 = new javax.swing.JLabel();
        Decoupe = new javax.swing.JPanel();
        addingPanel2 = new javax.swing.JPanel();
        boutonsIntExt1 = new javax.swing.JPanel(new FlowLayout(FlowLayout.LEFT));
        jPanel2 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        coteInterieur1 = new javax.swing.JToggleButton();
        coteExterieur1 = new javax.swing.JToggleButton();
        decoupe_PliDeSoudure = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        decoupe_MargeEpaisseurMur = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        boutonsCote1 = new javax.swing.JPanel(new FlowLayout(FlowLayout.LEFT));
        coteNord1 = new javax.swing.JToggleButton();
        coteSud1 = new javax.swing.JToggleButton();
        coteEst1 = new javax.swing.JToggleButton();
        coteOuest1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        UndoButton = new javax.swing.JButton();
        RedoButton = new javax.swing.JButton();
        Grille_Magnetique = new javax.swing.JToggleButton();
        resetZoom = new javax.swing.JButton();
        mouseCoord = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        gapGrille = new javax.swing.JTextField();
        mainScrollPane = new javax.swing.JScrollPane();
        drawingPanel1 = new ca.ulaval.glo2004.gui.DrawingPanel(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        newSalle = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        createViewButtonGroup.add(coteNord);
        createViewButtonGroup.add(coteSud);
        createViewButtonGroup.add(coteEst);
        createViewButtonGroup.add(coteOuest);

        createIntExtButtonGroup.add(coteInterieur);
        createIntExtButtonGroup.add(coteExterieur);

        createViewButtonGroup.add(addButton);
        createViewButtonGroup.add(editBouton);
        createViewButtonGroup.add(deleteBouton);

        jMenuItem3.setText("jMenuItem3");

        createViewButtonGroup.add(coteExterieur1);
        createViewButtonGroup.add(coteInterieur1);

        createViewButtonGroup.add(ajoutSeparateur);
        createViewButtonGroup.add(selectSeparateur);
        createViewButtonGroup.add(deleteSeparateur);

        createViewButtonGroup.add(ajoutSeparateur1);
        createViewButtonGroup.add(selectSeparateur1);
        createViewButtonGroup.add(deleteSeparateur1);

        createViewButtonGroup.add(coteNord1);
        createViewButtonGroup.add(coteSud1);
        createViewButtonGroup.add(coteEst1);
        createViewButtonGroup.add(coteOuest1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jLabel1.setText("Dimensions de la salle");

        jLabel2.setText("Largeur");

        jLabel3.setText("Longueur");

        jLabel4.setText("pouces");

        jLabel5.setText("pouces");

        dessus_LargeurSalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dessus_LargeurSalleActionPerformed(evt);
            }
        });
        dessus_LargeurSalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dessus_LargeurSalleKeyPressed(evt);
            }
        });

        dessus_LongueurSalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dessus_LongueurSalleActionPerformed(evt);
            }
        });
        dessus_LongueurSalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dessus_LongueurSalleKeyPressed(evt);
            }
        });

        jLabel15.setText("Hauteur globale retour d'air");

        dessus_HauteurRetourDair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dessus_HauteurRetourDairActionPerformed(evt);
            }
        });
        dessus_HauteurRetourDair.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dessus_HauteurRetourDairKeyPressed(evt);
            }
        });

        jLabel17.setText("pouces");

        jLabel24.setText("S√©parateurs/Murs");

        jLabel41.setText("Epaisseur des murs");

        dessus_MargeEpaisseurMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dessus_MargeEpaisseurMurActionPerformed(evt);
            }
        });
        dessus_MargeEpaisseurMur.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dessus_MargeEpaisseurMurKeyPressed(evt);
            }
        });

        jLabel43.setText("pouces");

        ajoutSeparateur.setText("Ajouter");
        ajoutSeparateur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ajoutSeparateurMousePressed(evt);
            }
        });
        ajoutSeparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutSeparateurActionPerformed(evt);
            }
        });

        selectSeparateur.setText("S√©lectionner");
        selectSeparateur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                selectSeparateurMousePressed(evt);
            }
        });
        selectSeparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSeparateurActionPerformed(evt);
            }
        });

        deleteSeparateur.setText("Supprimer");
        deleteSeparateur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                deleteSeparateurMousePressed(evt);
            }
        });
        deleteSeparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSeparateurActionPerformed(evt);
            }
        });

        comboBoxDessus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nord", "Sud", "Ouest", "Est" }));
        comboBoxDessus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDessusActionPerformed(evt);
            }
        });

        jLabel6.setText("Longueur");

        longueurMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longueurMurActionPerformed(evt);
            }
        });
        longueurMur.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                longueurMurKeyPressed(evt);
            }
        });

        jLabel7.setText("pouces");

        jLabel8.setText("Hauteur");

        dessus_HauteurSalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dessus_HauteurSalleActionPerformed(evt);
            }
        });
        dessus_HauteurSalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dessus_HauteurSalleKeyPressed(evt);
            }
        });

        jLabel9.setText("pouces");

        javax.swing.GroupLayout addingPanel1Layout = new javax.swing.GroupLayout(addingPanel1);
        addingPanel1.setLayout(addingPanel1Layout);
        addingPanel1Layout.setHorizontalGroup(
            addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(addingPanel1Layout.createSequentialGroup()
                        .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(addingPanel1Layout.createSequentialGroup()
                                    .addComponent(ajoutSeparateur, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxDessus, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(deleteSeparateur, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addingPanel1Layout.createSequentialGroup()
                                .addComponent(dessus_MargeEpaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel43))
                            .addComponent(jLabel41)
                            .addComponent(selectSeparateur, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addingPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addGroup(addingPanel1Layout.createSequentialGroup()
                                        .addComponent(dessus_HauteurRetourDair, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17))
                                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(addingPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(longueurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(178, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addingPanel1Layout.createSequentialGroup()
                        .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dessus_HauteurSalle)
                            .addComponent(dessus_LongueurSalle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dessus_LargeurSalle, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addGap(116, 116, 116))))
        );
        addingPanel1Layout.setVerticalGroup(
            addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(dessus_LargeurSalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(dessus_LongueurSalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addingPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8))
                    .addGroup(addingPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(dessus_HauteurSalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dessus_HauteurRetourDair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ajoutSeparateur)
                    .addComponent(comboBoxDessus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectSeparateur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(longueurMur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteSeparateur)
                .addGap(13, 13, 13)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dessus_MargeEpaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DessusLayout = new javax.swing.GroupLayout(Dessus);
        Dessus.setLayout(DessusLayout);
        DessusLayout.setHorizontalGroup(
            DessusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addingPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        DessusLayout.setVerticalGroup(
            DessusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addingPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Dessus", Dessus);

        coteNord.setText("Nord");
        coteNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteNordActionPerformed(evt);
            }
        });
        boutonsCote.add(coteNord);

        coteSud.setText("Sud");
        coteSud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteSudActionPerformed(evt);
            }
        });
        boutonsCote.add(coteSud);

        coteEst.setText("Est");
        coteEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteEstActionPerformed(evt);
            }
        });
        boutonsCote.add(coteEst);

        coteOuest.setText("Ouest");
        coteOuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteOuestActionPerformed(evt);
            }
        });
        boutonsCote.add(coteOuest);

        coteInterieur.setText("Int√©rieur");
        coteInterieur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteInterieurActionPerformed(evt);
            }
        });
        boutonsIntExt.add(coteInterieur);

        coteExterieur.setText("Ext√©rieur");
        coteExterieur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteExterieurActionPerformed(evt);
            }
        });
        boutonsIntExt.add(coteExterieur);

        editBouton.setText("√âditer");
        editBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBoutonActionPerformed(evt);
            }
        });

        deleteBouton.setText("Supprimer");
        deleteBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBoutonActionPerformed(evt);
            }
        });

        jLabel11.setText("Configuration");

        jLabel12.setText("Largeur");

        jLabel13.setText("Hauteur");

        cote_HauteurAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cote_HauteurAccessoireActionPerformed(evt);
            }
        });
        cote_HauteurAccessoire.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cote_HauteurAccessoireKeyPressed(evt);
            }
        });

        cote_LargeurAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cote_LargeurAccessoireActionPerformed(evt);
            }
        });
        cote_LargeurAccessoire.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cote_LargeurAccessoireKeyPressed(evt);
            }
        });

        jLabel19.setText("pouces");

        jLabel21.setText("pouces");

        addButton.setText("Ajouter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        accessoireTypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Retour d'air", "Prise √©lectrique", "Porte", "Fen√™tre" }));
        accessoireTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessoireTypeBoxActionPerformed(evt);
            }
        });

        labelMargeFenetre.setText("Marge fen√™tre");
        labelMargeFenetre.setVisible(false);

        margeFenetre.setText("0 1/8");
        margeFenetre.setVisible(false);
        margeFenetre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                margeFenetreActionPerformed(evt);
            }
        });
        margeFenetre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                margeFenetreKeyPressed(evt);
            }
        });

        labelMargeFenetre2.setText("pouces");
        labelMargeFenetre2.setVisible(false);

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteBouton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editBouton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(accessoireTypeBox, 0, 463, Short.MAX_VALUE)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(actionPanelLayout.createSequentialGroup()
                                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(labelMargeFenetre))
                                .addGap(30, 30, 30)
                                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cote_HauteurAccessoire)
                                    .addComponent(cote_LargeurAccessoire, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                    .addComponent(margeFenetre))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel19)
                                    .addComponent(labelMargeFenetre2))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accessoireTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(editBouton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cote_LargeurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cote_HauteurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMargeFenetre)
                    .addComponent(margeFenetre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMargeFenetre2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(deleteBouton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout addingPanelLayout = new javax.swing.GroupLayout(addingPanel);
        addingPanel.setLayout(addingPanelLayout);
        addingPanelLayout.setHorizontalGroup(
            addingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(actionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(addingPanelLayout.createSequentialGroup()
                .addGroup(addingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addingPanelLayout.createSequentialGroup()
                        .addGroup(addingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boutonsCote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boutonsIntExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 231, Short.MAX_VALUE))
                    .addGroup(addingPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator3)))
                .addContainerGap())
        );
        addingPanelLayout.setVerticalGroup(
            addingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boutonsCote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boutonsIntExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel25.setText("S√©parateurs");

        ajoutSeparateur1.setText("Ajouter");
        ajoutSeparateur1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ajoutSeparateur1MousePressed(evt);
            }
        });
        ajoutSeparateur1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutSeparateur1ActionPerformed(evt);
            }
        });

        comboBoxElevation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nord", "Sud", "Ouest", "Est" }));
        comboBoxElevation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxElevationActionPerformed(evt);
            }
        });

        selectSeparateur1.setText("S√©lectionner");
        selectSeparateur1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                selectSeparateur1MousePressed(evt);
            }
        });
        selectSeparateur1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSeparateur1ActionPerformed(evt);
            }
        });

        deleteSeparateur1.setText("Supprimer");
        deleteSeparateur1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                deleteSeparateur1MousePressed(evt);
            }
        });
        deleteSeparateur1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSeparateur1ActionPerformed(evt);
            }
        });

        cote_LongueurMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cote_LongueurMurActionPerformed(evt);
            }
        });
        cote_LongueurMur.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cote_LongueurMurKeyPressed(evt);
            }
        });

        labelMargeFenetre3.setText("pouces");
        labelMargeFenetre2.setVisible(false);

        javax.swing.GroupLayout CoteLayout = new javax.swing.GroupLayout(Cote);
        Cote.setLayout(CoteLayout);
        CoteLayout.setHorizontalGroup(
            CoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(CoteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CoteLayout.createSequentialGroup()
                        .addComponent(ajoutSeparateur1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxElevation, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel25)
                    .addComponent(deleteSeparateur1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CoteLayout.createSequentialGroup()
                        .addComponent(selectSeparateur1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cote_LongueurMur)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelMargeFenetre3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CoteLayout.setVerticalGroup(
            CoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CoteLayout.createSequentialGroup()
                .addComponent(addingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ajoutSeparateur1)
                    .addComponent(comboBoxElevation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectSeparateur1)
                    .addComponent(cote_LongueurMur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMargeFenetre3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteSeparateur1)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("C√¥t√©", Cote);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel30.setText("Propri√©t√©s panneau s√©lectionn√©");

        coteInterieur1.setText("Int√©rieur");
        coteInterieur1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                coteInterieur1MousePressed(evt);
            }
        });
        coteInterieur1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteInterieur1ActionPerformed(evt);
            }
        });

        coteExterieur1.setText("Ext√©rieur");
        coteExterieur1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                coteExterieur1MousePressed(evt);
            }
        });
        coteExterieur1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteExterieur1ActionPerformed(evt);
            }
        });

        decoupe_PliDeSoudure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                decoupe_PliDeSoudureKeyPressed(evt);
            }
        });

        jLabel32.setText("Pli de soudure");

        jLabel40.setText("pouces");

        jLabel45.setText("Marge d'√©paisseur du mur");

        decoupe_MargeEpaisseurMur.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                decoupe_MargeEpaisseurMurKeyPressed(evt);
            }
        });

        jLabel47.setText("pouces");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jLabel32)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(decoupe_PliDeSoudure, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel40))
                    .addComponent(jLabel45)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(decoupe_MargeEpaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel47))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(coteExterieur1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coteInterieur1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coteInterieur1)
                    .addComponent(coteExterieur1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decoupe_PliDeSoudure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decoupe_MargeEpaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel10.setText("Liste des murs");

        coteNord1.setText("Nord");
        coteNord1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteNord1ActionPerformed(evt);
            }
        });
        boutonsCote1.add(coteNord1);

        coteSud1.setText("Sud");
        coteSud1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteSud1ActionPerformed(evt);
            }
        });
        boutonsCote1.add(coteSud1);

        coteEst1.setText("Est");
        coteEst1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteEst1ActionPerformed(evt);
            }
        });
        boutonsCote1.add(coteEst1);

        coteOuest1.setText("Ouest");
        coteOuest1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coteOuest1ActionPerformed(evt);
            }
        });
        boutonsCote1.add(coteOuest1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(boutonsCote1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 215, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boutonsCote1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addingPanel2Layout = new javax.swing.GroupLayout(addingPanel2);
        addingPanel2.setLayout(addingPanel2Layout);
        addingPanel2Layout.setHorizontalGroup(
            addingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addingPanel2Layout.createSequentialGroup()
                .addGroup(addingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(addingPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boutonsIntExt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(353, 353, 353))
        );
        addingPanel2Layout.setVerticalGroup(
            addingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingPanel2Layout.createSequentialGroup()
                .addGroup(addingPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addingPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(boutonsIntExt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );

        javax.swing.GroupLayout DecoupeLayout = new javax.swing.GroupLayout(Decoupe);
        Decoupe.setLayout(DecoupeLayout);
        DecoupeLayout.setHorizontalGroup(
            DecoupeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DecoupeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addingPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, Short.MAX_VALUE))
        );
        DecoupeLayout.setVerticalGroup(
            DecoupeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addingPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("D√©coupe", Decoupe);

        UndoButton.setText("Undo");
        UndoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UndoButtonMousePressed(evt);
            }
        });

        RedoButton.setText("Redo");
        RedoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RedoButtonMousePressed(evt);
            }
        });

        Grille_Magnetique.setText("Grille magn√©tique");
        Grille_Magnetique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Grille_MagnetiqueActionPerformed(evt);
            }
        });

        resetZoom.setText("Reset Zoom");
        resetZoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetZoomMousePressed(evt);
            }
        });

        mouseCoord.setText(" X: 0, Y: 0");

        jSlider1.setMaximum(150);
        jSlider1.setMinimum(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        gapGrille.setText(Integer.toString((int)drawingPanel1.getGapGrille()));
        gapGrille.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                gapGrilleKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mouseCoord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetZoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(UndoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RedoButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Grille_Magnetique, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gapGrille, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(mouseCoord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetZoom)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gapGrille, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UndoButton)
                    .addComponent(RedoButton)
                    .addComponent(Grille_Magnetique))
                .addContainerGap())
        );

        drawingPanel1.setBackground(new java.awt.Color(255, 255, 255));
        drawingPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        drawingPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseMoved(evt);
            }
        });
        drawingPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawingPanel1Layout = new javax.swing.GroupLayout(drawingPanel1);
        drawingPanel1.setLayout(drawingPanel1Layout);
        drawingPanel1Layout.setHorizontalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );
        drawingPanel1Layout.setVerticalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 923, Short.MAX_VALUE)
        );

        mainScrollPane.setViewportView(drawingPanel1);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Charger salle");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        newSalle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newSalle.setText("Nouvelle Salle");
        newSalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newSalleMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newSalleMousePressed(evt);
            }
        });
        newSalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSalleActionPerformed(evt);
            }
        });
        jMenu1.add(newSalle);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Undo");
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Redo");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem6.setText("Save");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem7.setText("Export SVG");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem2.setText("Quit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(mainScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if(this.controller.reqFichier() == null)
        {
            int x = JOptionPane.showConfirmDialog(this, "Tous les changements n'ont pas √©t√© sauvegard√©s. Voulez-vous continuer?", "Quitter", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(x == 0)
            {
                System.exit(0);
            }
        }
        else
        {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void coteInterieur1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteInterieur1ActionPerformed
       this.controller.getSalle().setTypeCoteActif(Salle.listeTypeCote.Interieur);
       this.drawingPanel1.repaint();
    }//GEN-LAST:event_coteInterieur1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void ajoutSeparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutSeparateurActionPerformed
        this.setMode(ApplicationMode.ADD);
        this.setMode(Modes.SEPARATEUR);
    }//GEN-LAST:event_ajoutSeparateurActionPerformed

    private void coteInterieurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteInterieurActionPerformed
        controller.getSalle().setTypeCoteActif(Salle.listeTypeCote.Interieur);
        drawingPanel1.repaint();
    }//GEN-LAST:event_coteInterieurActionPerformed

    private void coteNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteNordActionPerformed
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Nord);
        drawingPanel1.repaint();
    }//GEN-LAST:event_coteNordActionPerformed

    private void ajoutSeparateurMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ajoutSeparateurMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ajoutSeparateurMousePressed

    private void newSalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSalleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newSalleActionPerformed

    private void newSalleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newSalleMousePressed
        // TODO add your handling code here:
        int confirmation = javax.swing.JOptionPane.showConfirmDialog(null, "Voulez-vous cr√©er une salle?", "Cr√©er Salle", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
        if (confirmation == 0)
        {
            String Slargeur = dessus_LargeurSalle.getText();
            String Slongeur = dessus_LargeurSalle.getText();
            MesureImperial mEpaisseur = new MesureImperial(40,0,1);
            if(Slargeur!="" && Slongeur!=""){
            controller.newSalle();
            }
            MesureImperial mLonguer = UserInput.StringtoMesureImperial(Slongeur);
            MesureImperial mLargeur = UserInput.StringtoMesureImperial(Slargeur);
            if(dessus_MargeEpaisseurMur.getText()!=""){
            mEpaisseur = UserInput.StringtoMesureImperial(dessus_MargeEpaisseurMur.getText());
            }
            MesureImperial mHauteur = new MesureImperial(600,0,1);
            if(dessus_HauteurSalle.getText()!=""){
            mHauteur = UserInput.StringtoMesureImperial(dessus_HauteurSalle.getText());
            }
            controller.newSalle(mLonguer,mLargeur,mHauteur,mEpaisseur);
        this.dessus_LargeurSalle.setText(controller.getSalle().getLargeur().toString(controller.getSalle().getLargeur()));
        this.dessus_LongueurSalle.setText(controller.getSalle().getLongueur().toString(controller.getSalle().getLongueur()));
        this.dessus_HauteurSalle.setText(controller.getSalle().getmHauteur().toString(controller.getSalle().getmHauteur()));
        this.dessus_MargeEpaisseurMur.setText(controller.getSalle().getEpaisseurMur().toString(controller.getSalle().getEpaisseurMur()));
        this.dessus_HauteurRetourDair.setText(controller.getSalle().getDistanceSolRetourAir().toString(controller.getSalle().getDistanceSolRetourAir()));
        drawingPanel1.repaint();
        }
        this.controller.getSalle().copierSalle(this.controller.getSalle());
    }//GEN-LAST:event_newSalleMousePressed

    private void newSalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newSalleMouseClicked
    }//GEN-LAST:event_newSalleMouseClicked

    private void UndoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UndoButtonMousePressed
        // TODO add your handling code here:
        controller.undo();
        drawingPanel1.repaint();
    }//GEN-LAST:event_UndoButtonMousePressed

    private void RedoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RedoButtonMousePressed
        // TODO add your handling code here:
        controller.redo();
        drawingPanel1.repaint();
    }//GEN-LAST:event_RedoButtonMousePressed

    private void editBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBoutonActionPerformed
        this.setMode(ApplicationMode.SELECT);
    }//GEN-LAST:event_editBoutonActionPerformed

    private void deleteBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBoutonActionPerformed
        this.setMode(ApplicationMode.DELETE);
    }//GEN-LAST:event_deleteBoutonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        this.setMode(ApplicationMode.ADD);
    }//GEN-LAST:event_addButtonActionPerformed

    private void Grille_MagnetiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Grille_MagnetiqueActionPerformed
        drawingPanel1.setGridLines();
    }//GEN-LAST:event_Grille_MagnetiqueActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        controller.enregistrerProjet();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.controller.chargerProjet();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resetZoomMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetZoomMousePressed
        // TODO add your handling code here:
        this.drawingPanel1.setZoom(1);
        this.drawingPanel1.setZoomX(0);
        this.drawingPanel1.setZoomY(0);
        drawingPanel1.repaint();
    }//GEN-LAST:event_resetZoomMousePressed

    private void dessus_LargeurSalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dessus_LargeurSalleActionPerformed
      //  
    }//GEN-LAST:event_dessus_LargeurSalleActionPerformed

    private void dessus_LongueurSalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dessus_LongueurSalleActionPerformed
        //
    }//GEN-LAST:event_dessus_LongueurSalleActionPerformed

    private void dessus_MargeEpaisseurMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dessus_MargeEpaisseurMurActionPerformed

    }//GEN-LAST:event_dessus_MargeEpaisseurMurActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if(controller.getSalle() != null) {
            if (jTabbedPane1.getSelectedIndex() == 0) {
                controller.getSalle().setVueCourante(Salle.vueType.Plan);
                this.drawingPanel1.repaint();
            }
            if (jTabbedPane1.getSelectedIndex() == 1) {
                controller.getSalle().setVueCourante(Salle.vueType.Elevation);
                this.drawingPanel1.repaint();
            }
            if (jTabbedPane1.getSelectedIndex() == 2) {
                controller.getSalle().setVueCourante(Salle.vueType.Decoupe);
                this.drawingPanel1.repaint();
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void coteSudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteSudActionPerformed
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Sud);
        drawingPanel1.repaint();
    }//GEN-LAST:event_coteSudActionPerformed

    private void coteEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteEstActionPerformed
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Est);
        drawingPanel1.repaint();
    }//GEN-LAST:event_coteEstActionPerformed

    private void coteOuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteOuestActionPerformed
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Ouest);
        drawingPanel1.repaint();
    }//GEN-LAST:event_coteOuestActionPerformed

    private void selectSeparateurMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectSeparateurMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectSeparateurMousePressed

    private void selectSeparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSeparateurActionPerformed
        // TODO add your handling code here:
        this.setMode(ApplicationMode.SELECT);
        this.setMode(Modes.SEPARATEUR);
    }//GEN-LAST:event_selectSeparateurActionPerformed

    private void drawingPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MousePressed
        // TODO add your handling code here:
        this.initMousePoint = new Point((int)(evt.getX()/drawingPanel1.getZoom()), (int)(evt.getY()/drawingPanel1.getZoom()));
        this.actualMousePoint = new Point(this.initMousePoint);
        Controleur.Modes actualElement = this.selectedMode;
        this.requestFocus();
        
        if(this.actualMode == ApplicationMode.SELECT && SwingUtilities.isLeftMouseButton(evt))
        {
            int x = evt.getX();
            int y = evt.getY();
            
            if(actualElement.equals(Modes.SEPARATEUR))
            {
                separateurSelectionne = this.controller.separateurPlusProche(x, y);
                String longueur = separateurSelectionne.getmLongueurExterieur().toString(separateurSelectionne.getmLongueurExterieur());
                cote_LongueurMur.setText(longueur);
                longueurMur.setText(longueur);
            }
            else
            {
                elementSelectionne = this.controller.itemPlusProche(actualElement, x, y);
                elementSelectionne.setSelectionStatus(true);
                String largeur = elementSelectionne.getLargeur().toString(elementSelectionne.getLargeur());
                cote_LargeurAccessoire.setText(largeur);
                String hauteur = elementSelectionne.getHauteur().toString(elementSelectionne.getHauteur());
                cote_HauteurAccessoire.setText(hauteur);
                String marge = "" + elementSelectionne.getMargeFenetre().toString(elementSelectionne.getMargeFenetre());
                margeFenetre.setText(marge);
            }
            drawingPanel1.repaint();
        }
        else if(this.actualMode == ApplicationMode.ADD && SwingUtilities.isLeftMouseButton(evt))
        {
            Point npoint = new Point((int)this.initMousePoint.getX(), (int)this.initMousePoint.getY());
            Point point = npoint;
            if(drawingPanel1.getZoom()!=1){
                point = calculPointUnzoom(npoint);
            }
            if(actualElement.equals(Modes.SEPARATEUR))
            {
                boolean estSuperposeSeparateur = this.controller.verifierSeparateurSurAccessoire(point);
                int x = evt.getX();
                int y = evt.getY();
                if(getActualMode() == ApplicationMode.ADD){
                    if(controller.getSalle().getVueCourante() == Salle.vueType.Plan)
                        controller.getSalle().ajouterSeparateur(comboBoxDessus.getSelectedItem().toString(),x,y);
                    else if (controller.getSalle().getVueCourante() == Salle.vueType.Elevation)
                    {
                        if(estSuperposeSeparateur){
                        controller.getSalle().ajouterSeparateur(comboBoxElevation.getSelectedItem().toString(),x,y);
                        }
                        else
                        {
                            JOptionPane opt1;
                               opt1 = new JOptionPane();
                               opt1.showMessageDialog(null, "On ne peut pas ajouter un s√©parateur sur un accessoire !", "ERREUR", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            }
            else 
            {
                int largeur = 0;
                int hauteur = 0;
                
                if(accessoireTypeBox.getSelectedItem() == "Retour d'air")
                {
                    largeur =  12; 
                    hauteur = 12;
                }
                
                else if(accessoireTypeBox.getSelectedItem() == "Fen√™tre")
                {
                    largeur =  60; 
                    hauteur = 40;
                }
                
                else if(accessoireTypeBox.getSelectedItem() == "Porte")
                {
                    largeur =  33; 
                    hauteur = 84;
                }
                
                else if(accessoireTypeBox.getSelectedItem() == "Prise √©lectrique")
                {
                    largeur =  3; 
                    hauteur = 3;
                }
                
                
                boolean estSuperposeElement = this.controller.verifierSuperpositionElement(point, largeur, hauteur);
                boolean estSuperposeSeparateur = this.controller.verifierSuperpositionSeparateur(point, largeur, hauteur);
                boolean estValide = this.controller.verifierValiditeAccessoireInterieur(point, largeur, hauteur);
                                  
                if(estSuperposeElement && estSuperposeSeparateur && estValide)
                {
                    this.controller.add(actualElement, point);
                }
                else
                {
                   if (!estSuperposeElement)
                    {
                        JOptionPane opt1;
                        opt1 = new JOptionPane();
                        opt1.showMessageDialog(null, "On ne peut superposer deux √©l√©ments!", "SUPERPOSITION", JOptionPane.INFORMATION_MESSAGE);  
                    }
                    else
                    {
                        if (!estSuperposeSeparateur)
                        {
                            JOptionPane opt1;
                            opt1 = new JOptionPane();
                            opt1.showMessageDialog(null, "On ne peut mettre un accessoire entre deux murs !", "SUPERPOSITION", JOptionPane.INFORMATION_MESSAGE);   
                        }
                        else
                        {
                            if (!estValide)
                            {
                               JOptionPane opt1;
                               opt1 = new JOptionPane();
                               opt1.showMessageDialog(null, "On ne peut mettre un accessoire √† l'ext√©rieur des panneaux !", "ERREUR", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    }
                }
            }
            drawingPanel1.repaint();
        }
        else //DELETE
        {
            if(actualElement.equals(Modes.SEPARATEUR))
            {
                int x = evt.getX();
                int y = evt.getY();
                controller.getSalle().supprimerSeparateur(x,y);
            }
            else
            {
                int x = evt.getX();
                int y = evt.getY();
                elementSelectionne = this.controller.itemPlusProche(selectedMode, x, y);
                this.controller.getSalle().supprimerAccessoire(elementSelectionne);
                drawingPanel1.repaint();
            }
        }
        this.controller.getSalle().copierSalle(this.controller.getSalle());
    }//GEN-LAST:event_drawingPanel1MousePressed

    private void drawingPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseMoved
        // TODO add your handling code here:
        Point mousePoint = evt.getPoint();
        drawingPanel1.setMouseX(mousePoint.getX());
        drawingPanel1.setMouseY(mousePoint.getY());
        String s = " X: " + (int) (drawingPanel1.getMouseX() / drawingPanel1.getZoom()+drawingPanel1.getZoomX()) + ", Y: " + (int) (drawingPanel1.getMouseY() / drawingPanel1.getZoom()+drawingPanel1.getZoomY());
        mouseCoord.setText(s);
        drawingPanel1.repaint();
    }//GEN-LAST:event_drawingPanel1MouseMoved

    private void accessoireTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessoireTypeBoxActionPerformed
        if(accessoireTypeBox.getSelectedItem() == "Retour d'air")
        {
            this.setMode(Modes.RETOURDAIR);
            margeFenetre.setVisible(false);
            labelMargeFenetre.setVisible(false);
            labelMargeFenetre2.setVisible(false);
        }
        else if(accessoireTypeBox.getSelectedItem() == "Fen√™tre")
        {
            this.setMode(Modes.FENETRE);
            margeFenetre.setVisible(true);
            labelMargeFenetre.setVisible(true);
            labelMargeFenetre2.setVisible(true);
        }
        else if(accessoireTypeBox.getSelectedItem() == "Porte")
        {
            this.setMode(Modes.PORTE);
            margeFenetre.setVisible(false);
            labelMargeFenetre.setVisible(false);
            labelMargeFenetre2.setVisible(false);
        }
        else if(accessoireTypeBox.getSelectedItem() == "Prise √©lectrique")
        {
            this.setMode(Modes.PRISE);
            margeFenetre.setVisible(false);
            labelMargeFenetre.setVisible(false);
            labelMargeFenetre2.setVisible(false);
        }
    }//GEN-LAST:event_accessoireTypeBoxActionPerformed

    private void dessus_LargeurSalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dessus_LargeurSalleKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //dessus_LargeurSalle("correct");
            dessus_LargeurSalle.setEditable(true);
                    }
        else{
            //dessus_LargeurSalle("mauvais");
            dessus_LargeurSalle.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setLargeur(UserInput.StringtoMesureImperial(dessus_LargeurSalle.getText()));
            controller.getSalle().redimension();
            dessus_LargeurSalle.setText(controller.getSalle().getLargeur().toString(controller.getSalle().getLargeur()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        }
        
    }//GEN-LAST:event_dessus_LargeurSalleKeyPressed

    private void dessus_LongueurSalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dessus_LongueurSalleKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //dessus_LongeurSalle("correct");
            dessus_LongueurSalle.setEditable(true);
                    }
        else{
            //dessus_LongeurSalle("mauvais");
            dessus_LongueurSalle.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setLongueur(UserInput.StringtoMesureImperial(dessus_LongueurSalle.getText()));
            controller.getSalle().redimension();
            dessus_LongueurSalle.setText(controller.getSalle().getLongueur().toString(controller.getSalle().getLongueur()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_dessus_LongueurSalleKeyPressed

    private void drawingPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseClicked
        
    }//GEN-LAST:event_drawingPanel1MouseClicked

    private void deleteSeparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSeparateurActionPerformed
        this.setMode(ApplicationMode.DELETE);
        this.setMode(Modes.SEPARATEUR);
    }//GEN-LAST:event_deleteSeparateurActionPerformed

    private void deleteSeparateurMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteSeparateurMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteSeparateurMousePressed

    private void coteInterieur1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coteInterieur1MousePressed
    }//GEN-LAST:event_coteInterieur1MousePressed

    private void coteExterieur1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coteExterieur1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_coteExterieur1MousePressed

    private void ajoutSeparateur1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ajoutSeparateur1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ajoutSeparateur1MousePressed

    private void ajoutSeparateur1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutSeparateur1ActionPerformed
        // TODO add your handling code here:
        this.setMode(ApplicationMode.ADD);
        this.setMode(Modes.SEPARATEUR);
    }//GEN-LAST:event_ajoutSeparateur1ActionPerformed

    private void selectSeparateur1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectSeparateur1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectSeparateur1MousePressed

    private void selectSeparateur1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSeparateur1ActionPerformed
        this.setMode(ApplicationMode.SELECT);
        this.setMode(Modes.SEPARATEUR);
    }//GEN-LAST:event_selectSeparateur1ActionPerformed

    private void deleteSeparateur1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteSeparateur1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteSeparateur1MousePressed

    private void deleteSeparateur1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSeparateur1ActionPerformed
        // TODO add your handling code here:
        this.setMode(ApplicationMode.DELETE);
        this.setMode(Modes.SEPARATEUR);
    }//GEN-LAST:event_deleteSeparateur1ActionPerformed


    private void margeFenetreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_margeFenetreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_margeFenetreActionPerformed

    private void coteExterieurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteExterieurActionPerformed
        controller.getSalle().setTypeCoteActif(Salle.listeTypeCote.Exterieur);
        drawingPanel1.repaint();
    }//GEN-LAST:event_coteExterieurActionPerformed

    private void cote_LargeurAccessoireKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cote_LargeurAccessoireKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //cote_LargeurAccessoire("correct");
            cote_LargeurAccessoire.setEditable(true);
                    }
        else{
            //cote_LargeurAccessoire("mauvais");
            cote_LargeurAccessoire.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            String largeurconverti = conversionFraction.conversionInputString(cote_LargeurAccessoire.getText());
            boolean estSuperposerAcc = this.controller.verifierValiditeLargeurAccessoire(elementSelectionne, Integer.parseInt(largeurconverti));
             
            if (estSuperposerAcc)
            {
            elementSelectionne.setLargeur(UserInput.StringtoMesureImperial(cote_LargeurAccessoire.getText()));
            cote_LargeurAccessoire.setText(elementSelectionne.getLargeur().toString(elementSelectionne.getLargeur()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();  
            }
            else
            {
                if (!estSuperposerAcc)
                    {
                        JOptionPane opt1;
                        opt1 = new JOptionPane();
                        opt1.showMessageDialog(null, "L'accessoire doit √™tre seulement sur un mur", "SUPERPOSITION", JOptionPane.INFORMATION_MESSAGE);  
                    }
            }
        }
        
    }//GEN-LAST:event_cote_LargeurAccessoireKeyPressed

    private void cote_HauteurAccessoireKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cote_HauteurAccessoireKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //cote_HauteurAccessoire("correct");
            cote_HauteurAccessoire.setEditable(true);
        }
        else
        {
            //cote_HauteurAccessoire("mauvais");
            cote_HauteurAccessoire.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            String hauteurconverti = conversionFraction.conversionInputString(cote_HauteurAccessoire.getText());
            boolean estSuperposerAcc2 = this.controller.verifierValiditeHauteurAccessoire(elementSelectionne, Integer.parseInt(hauteurconverti));
             
            if (estSuperposerAcc2)
            {
            elementSelectionne.setHauteur(UserInput.StringtoMesureImperial(cote_HauteurAccessoire.getText()), controller.getSalle());
            cote_HauteurAccessoire.setText(elementSelectionne.getHauteur().toString(elementSelectionne.getHauteur()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
            }
            else
                {
                if (!estSuperposerAcc2)
                    {
                        JOptionPane opt1;
                        opt1 = new JOptionPane();
                        opt1.showMessageDialog(null, "L'accessoire doit √™tre √† l'int√©rieur du mur !", "SUPERPOSITION", JOptionPane.INFORMATION_MESSAGE);  
                    }
            }
        }
    }//GEN-LAST:event_cote_HauteurAccessoireKeyPressed

    private void margeFenetreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_margeFenetreKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //dessus_LongeurSalle("correct");
            margeFenetre.setEditable(true);
        }
        else{
            //dessus_LongeurSalle("mauvais");
            margeFenetre.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            elementSelectionne.setMargeFenetre(UserInput.StringtoMesureImperial(margeFenetre.getText()));
            margeFenetre.setText(elementSelectionne.getMargeFenetre().toString(elementSelectionne.getMargeFenetre()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_margeFenetreKeyPressed

    private void dessus_HauteurRetourDairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dessus_HauteurRetourDairActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dessus_HauteurRetourDairActionPerformed

    private void dessus_HauteurRetourDairKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dessus_HauteurRetourDairKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //dessus_HauteurRetourDair("correct");
            dessus_HauteurRetourDair.setEditable(true);
        }
        else{
            //dessus_HauteurRetourDair("mauvais");
            dessus_HauteurRetourDair.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setDistanceSolRetourAir(UserInput.StringtoMesureImperial(dessus_HauteurRetourDair.getText()));
            dessus_HauteurRetourDair.setText(controller.getSalle().getDistanceSolRetourAir().toString(controller.getSalle().getDistanceSolRetourAir()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_dessus_HauteurRetourDairKeyPressed

    private void dessus_MargeEpaisseurMurKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dessus_MargeEpaisseurMurKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //dessus_MargeEpaisseurMur("correct");
            dessus_MargeEpaisseurMur.setEditable(true);
        }
        else{
            //dessus_MargeEpaisseurMur("mauvais");
            dessus_MargeEpaisseurMur.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setEpaisseurMur(UserInput.StringtoMesureImperial(dessus_MargeEpaisseurMur.getText()));
            dessus_MargeEpaisseurMur.setText(controller.getSalle().getEpaisseurMur().toString(controller.getSalle().getEpaisseurMur()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_dessus_MargeEpaisseurMurKeyPressed

    private void cote_HauteurAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cote_HauteurAccessoireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cote_HauteurAccessoireActionPerformed

    private void decoupe_PliDeSoudureKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decoupe_PliDeSoudureKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //decoupe_PliDeSoudure("correct");
            decoupe_PliDeSoudure.setEditable(true);
        }
        else{
            //decoupe_PliDeSoudure("mauvais");
            decoupe_PliDeSoudure.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setMargePli(UserInput.StringtoMesureImperial(decoupe_PliDeSoudure.getText()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
            //
        }
    }//GEN-LAST:event_decoupe_PliDeSoudureKeyPressed

    private void decoupe_MargeEpaisseurMurKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decoupe_MargeEpaisseurMurKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //decoupe_MargeEpaisseurMur("correct");
            decoupe_MargeEpaisseurMur.setEditable(true);
        }
        else{
            //decoupe_MargeEpaisseurMur("mauvais");
            decoupe_MargeEpaisseurMur.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setMarge(UserInput.StringtoMesureImperial(decoupe_MargeEpaisseurMur.getText()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
            //
        }
    }//GEN-LAST:event_decoupe_MargeEpaisseurMurKeyPressed

    private void cote_LargeurAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cote_LargeurAccessoireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cote_LargeurAccessoireActionPerformed

    private void longueurMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longueurMurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longueurMurActionPerformed

    private void longueurMurKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_longueurMurKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //decoupe_MargeEpaisseurMur("correct");
            longueurMur.setEditable(true);
        }
        else{
            //decoupe_MargeEpaisseurMur("mauvais");
            longueurMur.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            int pointX = separateurSelectionne.getPoint().x;
            int pointY = separateurSelectionne.getPoint().y;
            String cote1 = comboBoxElevation.getSelectedItem().toString();
            int longueur = separateurSelectionne.getmLongueurExterieur().getEntier();
            separateurSelectionne.setmLongueurExterieur(UserInput.StringtoMesureImperial(longueurMur.getText()));
            int newLongueur = separateurSelectionne.getmLongueurExterieur().getEntier();
            Point newPoint = new Point(pointX + (newLongueur - longueur), pointY);
            longueurMur.setText(separateurSelectionne.getmLongueurExterieur().toString(separateurSelectionne.getmLongueurExterieur()) + "");
            
            controller.getSalle().supprimerSeparateurSelectionne(separateurSelectionne);
            controller.getSalle().ajouterSeparateur(cote1,newPoint.x,newPoint.y);
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        } 
    }//GEN-LAST:event_longueurMurKeyPressed

    private void cote_LongueurMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cote_LongueurMurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cote_LongueurMurActionPerformed

    private void cote_LongueurMurKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cote_LongueurMurKeyPressed
        //v√©rifier que seul ces touches sont accept√©es
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //decoupe_MargeEpaisseurMur("correct");
            cote_LongueurMur.setEditable(true);
        }
        else{
            //decoupe_MargeEpaisseurMur("mauvais");
            cote_LongueurMur.setEditable(false);
        }
        
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            int pointX = separateurSelectionne.getPoint().x;
            int pointY = separateurSelectionne.getPoint().y;
            String cote1 = comboBoxElevation.getSelectedItem().toString();
            int longueur = separateurSelectionne.getmLongueurExterieur().getEntier();
            separateurSelectionne.setmLongueurExterieur(UserInput.StringtoMesureImperial(cote_LongueurMur.getText()));
            int newLongueur = separateurSelectionne.getmLongueurExterieur().getEntier();
            Point newPoint = new Point(pointX + (newLongueur - longueur), pointY);
            cote_LongueurMur.setText(separateurSelectionne.getmLongueurExterieur().toString(separateurSelectionne.getmLongueurExterieur()) + "");
            
            controller.getSalle().supprimerSeparateurSelectionne(separateurSelectionne);
            controller.getSalle().ajouterSeparateur(cote1,newPoint.x,newPoint.y);

            this.drawingPanel1.repaint();
        } 
    }//GEN-LAST:event_cote_LongueurMurKeyPressed

    private void drawingPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_drawingPanel1MouseReleased

    private void dessus_HauteurSalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dessus_HauteurSalleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dessus_HauteurSalleActionPerformed

    private void dessus_HauteurSalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dessus_HauteurSalleKeyPressed
        if (userInput.verifyUserInputKeyPressedNumbers(evt))
        {
            //dessus_LargeurSalle("correct");
            dessus_HauteurSalle.setEditable(true);
        }
        else{
            //dessus_LargeurSalle("mauvais");
            dessus_HauteurSalle.setEditable(false);
        }

        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            controller.getSalle().setmHauteur(UserInput.StringtoMesureImperial(dessus_HauteurSalle.getText()));
            controller.getSalle().redimension();
            dessus_HauteurSalle.setText(controller.getSalle().getmHauteur().toString(controller.getSalle().getmHauteur()));
            this.controller.getSalle().copierSalle(this.controller.getSalle());
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_dessus_HauteurSalleKeyPressed

    private void comboBoxDessusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDessusActionPerformed
        if(comboBoxDessus.getSelectedItem() == "Nord")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Nord);
        }
        else if(comboBoxDessus.getSelectedItem() == "Sud")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Sud);
        }
        else if(comboBoxDessus.getSelectedItem() == "Est")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Est);
        }
        else if(comboBoxDessus.getSelectedItem() == "Ouest")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Ouest);
        }
    }//GEN-LAST:event_comboBoxDessusActionPerformed

    private void comboBoxElevationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxElevationActionPerformed
        if(comboBoxElevation.getSelectedItem() == "Nord")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Nord);
            this.drawingPanel1.repaint();
        }
        else if(comboBoxElevation.getSelectedItem() == "Sud")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Sud);
            this.drawingPanel1.repaint();
        }
        else if(comboBoxElevation.getSelectedItem() == "Est")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Est);
            this.drawingPanel1.repaint();
        }
        else if(comboBoxElevation.getSelectedItem() == "Ouest")
        {
            this.controller.getSalle().setCoteActif(Salle.listeCoteActif.Ouest);
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_comboBoxElevationActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        double gap = (double) jSlider1.getValue();
        drawingPanel1.setGapGrille(gap);
        gapGrille.setText(Integer.toString(jSlider1.getValue()));
        drawingPanel1.repaint();
    }//GEN-LAST:event_jSlider1StateChanged

    private void gapGrilleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gapGrilleKeyPressed
        // TODO add your handling code here:
        //Lorsque le user appuie sur la touche enter
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            double gap = (double) Integer.parseInt(gapGrille.getText());
            this.drawingPanel1.setGapGrille(gap);
            this.drawingPanel1.repaint();
        }
    }//GEN-LAST:event_gapGrilleKeyPressed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        //create the file
      try {
        File myObj = new File("C:\\Users\\nikdu\\salleSVG.svg");      
        if (myObj.createNewFile()) {
        System.out.println("File created: " + myObj.getName());
      } else {
        System.out.println("File already exists.");
      }
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
        
      //write the file
      try {
      FileWriter myWriter = new FileWriter("C:\\Users\\nikdu\\salleSVG.svg");
      myWriter.write("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"100%\">");
      String poly;
      if(controller.getSalle().getTypeCoteActif()==Salle.listeTypeCote.Exterieur){
           poly =  controller.SVGdecoupeMurExterieur();
      }else{
            poly = controller.SVGdecoupeMurInterieur();
      }
      poly += "\" style=\"fill:lime;stroke:purple;stroke-width:1;fill-rule:evenodd;\" />";
      myWriter.write(poly);
      myWriter.write("</svg>");
      myWriter.close();
      System.out.println("Successfully wrote to the file.");
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
      
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void drawingPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseDragged
        if(separateurSelectionne != null) {
            if (controller.getSalle().getVueCourante() == Salle.vueType.Plan) {
                Point point = separateurSelectionne.getPoint();
                boolean estSuperposeSeparateur = this.controller.verifierSeparateurSurAccessoire(new Point(evt.getX(), evt.getY()));
                if (estSuperposeSeparateur) {
                    if (separateurSelectionne.getmCote().getNom() == ca.ulaval.glo2004.domain.Cote.listeCote.Nord ||
                            separateurSelectionne.getmCote().getNom() == ca.ulaval.glo2004.domain.Cote.listeCote.Sud) {
                        separateurSelectionne.setPoint(new Point(evt.getX(), point.y));
                        controller.getSalle().redimension();
                    } else {
                        separateurSelectionne.setPoint(new Point(point.x, evt.getY()));
                        controller.getSalle().redimension();
                    }
                }
            }
            else if (controller.getSalle().getVueCourante() == Salle.vueType.Elevation) {
                Point point = separateurSelectionne.getPoint();
                boolean estSuperposeSeparateur = this.controller.verifierSeparateurSurAccessoire(new Point(evt.getX(), evt.getY()));
                if (estSuperposeSeparateur) {
                    if (separateurSelectionne.getmCote().getNom() == ca.ulaval.glo2004.domain.Cote.listeCote.Nord ||
                            separateurSelectionne.getmCote().getNom() == ca.ulaval.glo2004.domain.Cote.listeCote.Sud) {
                        separateurSelectionne.setPoint(new Point(evt.getX(), point.y));
                        controller.getSalle().redimension();
                    } else {
                        separateurSelectionne.setPoint(new Point(point.x, evt.getX()));
                        controller.getSalle().redimension();
                    }
                }
            }
        }
        else if (elementSelectionne != null && controller.getSalle().getVueCourante() == Salle.vueType.Elevation){
            Point point = new Point(evt.getX(), evt.getY());
            Point prevPoint = elementSelectionne.getPoint();
            elementSelectionne.setPoint(point);
            if(!controller.verifierAccessoireSurSeparatuer(elementSelectionne, point)){
                elementSelectionne.setPoint(prevPoint);
            }
        }
    }//GEN-LAST:event_drawingPanel1MouseDragged

    private void coteNord1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteNord1ActionPerformed
        // TODO add your handling code here:
        jComboBox1.removeAllItems();
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Nord);
        decoupe_PliDeSoudure.setText(controller.getListeCotes().get(0).getmSalle().getMargePli().toString(controller.getListeCotes().get(0).getmSalle().getMargePli()));
        decoupe_MargeEpaisseurMur.setText(controller.getListeCotes().get(0).getmSalle().getMarge().toString(controller.getListeCotes().get(0).getmSalle().getMarge()));
        int size = controller.getSalle().getListeCote().get(0).getListeMurs().size();
        for(int i = 0; i<size; i++){
            jComboBox1.addItem(Integer.toString(i));
        }
    }//GEN-LAST:event_coteNord1ActionPerformed

    private void coteSud1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteSud1ActionPerformed
        // TODO add your handling code here:
        jComboBox1.removeAllItems();
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Sud);
        decoupe_PliDeSoudure.setText(controller.getListeCotes().get(1).getmSalle().getMargePli().toString(controller.getListeCotes().get(1).getmSalle().getMargePli()));
        decoupe_MargeEpaisseurMur.setText(controller.getListeCotes().get(1).getmSalle().getMarge().toString(controller.getListeCotes().get(1).getmSalle().getMarge()));
        int size = controller.getSalle().getListeCote().get(1).getListeMurs().size();
        for(int i = 0; i<size; i++){
            jComboBox1.addItem(Integer.toString(i));
        }
    }//GEN-LAST:event_coteSud1ActionPerformed

    private void coteEst1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteEst1ActionPerformed
        // TODO add your handling code here:
        jComboBox1.removeAllItems();
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Est);
        decoupe_PliDeSoudure.setText(controller.getListeCotes().get(2).getmSalle().getMargePli().toString(controller.getListeCotes().get(2).getmSalle().getMargePli()));
        decoupe_MargeEpaisseurMur.setText(controller.getListeCotes().get(2).getmSalle().getMarge().toString(controller.getListeCotes().get(2).getmSalle().getMarge()));
        int size = controller.getSalle().getListeCote().get(2).getListeMurs().size();
        for(int i = 0; i<size; i++){
            jComboBox1.addItem(Integer.toString(i));
        }
    }//GEN-LAST:event_coteEst1ActionPerformed

    private void coteOuest1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteOuest1ActionPerformed
        // TODO add your handling code here:
        jComboBox1.removeAllItems();
        controller.getSalle().setCoteActif(Salle.listeCoteActif.Ouest);
        decoupe_PliDeSoudure.setText(controller.getListeCotes().get(3).getmSalle().getMargePli().toString(controller.getListeCotes().get(3).getmSalle().getMargePli()));
        decoupe_MargeEpaisseurMur.setText(controller.getListeCotes().get(3).getmSalle().getMarge().toString(controller.getListeCotes().get(3).getmSalle().getMarge()));
        int size = controller.getSalle().getListeCote().get(3).getListeMurs().size();
        for(int i = 0; i<size; i++){
            jComboBox1.addItem(Integer.toString(i));
        }
    }//GEN-LAST:event_coteOuest1ActionPerformed

    private void coteExterieur1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coteExterieur1ActionPerformed
         this.controller.getSalle().setTypeCoteActif(Salle.listeTypeCote.Exterieur);
         this.drawingPanel1.repaint();
    }//GEN-LAST:event_coteExterieur1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        for (Cote c :controller.getSalle().getListeCote()){
            for (Mur m : c.getListeMurs()){
            m.setSelectionStatus(false);
            }
        }
        if(controller.getSalle().getCoteActif()==  Salle.listeCoteActif.Nord){
        controller.getSalle().getListeCote().get(0).getListeMurs().get((jComboBox1.getSelectedIndex())+2).setSelectionStatus(true);
       }else if(controller.getSalle().getCoteActif()==  Salle.listeCoteActif.Sud){
        controller.getSalle().getListeCote().get(1).getListeMurs().get((jComboBox1.getSelectedIndex())+2).setSelectionStatus(true);
       }else if(controller.getSalle().getCoteActif()==  Salle.listeCoteActif.Est){
        controller.getSalle().getListeCote().get(2).getListeMurs().get((jComboBox1.getSelectedIndex())+2).setSelectionStatus(true);
       }else{
        controller.getSalle().getListeCote().get(3).getListeMurs().get((jComboBox1.getSelectedIndex())+2).setSelectionStatus(true);   
       }
        this.drawingPanel1.repaint();
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Cote;
    private javax.swing.JPanel Decoupe;
    private javax.swing.JPanel Dessus;
    private javax.swing.JToggleButton Grille_Magnetique;
    private javax.swing.JButton RedoButton;
    private javax.swing.JButton UndoButton;
    private javax.swing.JComboBox<String> accessoireTypeBox;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JToggleButton addButton;
    private javax.swing.JPanel addingPanel;
    private javax.swing.JPanel addingPanel1;
    private javax.swing.JPanel addingPanel2;
    private javax.swing.JToggleButton ajoutSeparateur;
    private javax.swing.JToggleButton ajoutSeparateur1;
    private javax.swing.JPanel boutonsCote;
    private javax.swing.JPanel boutonsCote1;
    private javax.swing.JPanel boutonsIntExt;
    private javax.swing.JPanel boutonsIntExt1;
    private javax.swing.ButtonGroup buttonGroupDecoupe;
    private javax.swing.JComboBox<String> comboBoxDessus;
    private javax.swing.JComboBox<String> comboBoxElevation;
    private javax.swing.JToggleButton coteEst;
    private javax.swing.JToggleButton coteEst1;
    private javax.swing.JToggleButton coteExterieur;
    private javax.swing.JToggleButton coteExterieur1;
    private javax.swing.JToggleButton coteInterieur;
    private javax.swing.JToggleButton coteInterieur1;
    private javax.swing.JToggleButton coteNord;
    private javax.swing.JToggleButton coteNord1;
    private javax.swing.JToggleButton coteOuest;
    private javax.swing.JToggleButton coteOuest1;
    private javax.swing.JToggleButton coteSud;
    private javax.swing.JToggleButton coteSud1;
    private javax.swing.JTextField cote_HauteurAccessoire;
    private javax.swing.JTextField cote_LargeurAccessoire;
    private javax.swing.JTextField cote_LongueurMur;
    private javax.swing.ButtonGroup createActionButtonGroup;
    private javax.swing.ButtonGroup createDecoupeButtonGroup;
    private javax.swing.ButtonGroup createIntExtButtonGroup;
    private javax.swing.ButtonGroup createSeparateurButtonGroup;
    private javax.swing.ButtonGroup createSeparateurCoteGroup;
    private javax.swing.ButtonGroup createViewButtonGroup;
    private javax.swing.JTextField decoupe_MargeEpaisseurMur;
    private javax.swing.JTextField decoupe_PliDeSoudure;
    private javax.swing.JToggleButton deleteBouton;
    private javax.swing.JToggleButton deleteSeparateur;
    private javax.swing.JToggleButton deleteSeparateur1;
    private javax.swing.JTextField dessus_HauteurRetourDair;
    private javax.swing.JTextField dessus_HauteurSalle;
    private javax.swing.JTextField dessus_LargeurSalle;
    private javax.swing.JTextField dessus_LongueurSalle;
    private javax.swing.JTextField dessus_MargeEpaisseurMur;
    private ca.ulaval.glo2004.gui.DrawingPanel drawingPanel1;
    private javax.swing.JToggleButton editBouton;
    private javax.swing.JTextField gapGrille;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelMargeFenetre;
    private javax.swing.JLabel labelMargeFenetre2;
    private javax.swing.JLabel labelMargeFenetre3;
    private javax.swing.JTextField longueurMur;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JTextField margeFenetre;
    private javax.swing.JLabel mouseCoord;
    private javax.swing.JMenuItem newSalle;
    private javax.swing.JButton resetZoom;
    private javax.swing.JToggleButton selectSeparateur;
    private javax.swing.JToggleButton selectSeparateur1;
    // End of variables declaration//GEN-END:variables
}
